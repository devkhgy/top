{
	"info": {
		"_postman_id": "18245403-f3c5-4f12-8fb6-52ab6b676c3a",
		"name": "OneWallet API.",
		"description": "### Revision Record ###\r\n\r\n| Date | Description | Ver | Modifier |\r\n|---|---|---|---|\r\n| 2020-11-01 | Initialization | v1.0.0 | Ivan |\r\n\r\n### Warning ###\r\n\r\n+ In UAT, all transactions with testing banks will be mocked. You need to be aware that picking non-testing banks will proceed with an **ACTUAL** transaction.\r\n+ The timezone used in all One Wallet responses is **GMT + 8 (Beijing)**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "A. Important infomation",
			"item": [
				{
					"name": "a. Integration URL",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)"
					},
					"response": []
				},
				{
					"name": "b. Transaction Amount",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Heads Up!\r\n\r\nAny amounts of transaction in APIs and Merchant Back Office may use different units. \r\n\r\nFor instance, one uses a API to create a new transaction with $10,000 VND, it will be display $10 kVND in Merchant Back Office ($1,000 VND = $1 kVND).\r\n\r\nThe amounts in APIs are always picked genuine unit for bank system."
					},
					"response": []
				},
				{
					"name": "c. Bank Code",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Test Bank Code (Only UAT)\n----------------\nbank_code | bank |\n:---:|:---:|\nTEST_HGY    |TEST_HGY\n\nVietnam Bank Code\n----------------\nbank_code | bank | available order type\n:---:|:---:|:---:\nACB     | Asia Commercial Bank | 100(Online banking), Bank transfer, Bank QR, Withdrawal\nAGRI    | AGRI Bank | 100(Online banking), Bank transfer\nBIDV    | Bank for Investment and Development of Vietnam | 100(Online banking), Bank transfer, Bank QR, Withdrawal\nDAB     | DongA BANK | 100(Online banking), Bank transfer, Withdrawal\nEXB     | EXIM Bank | 100(Online banking), Bank transfer\nMB      | Military Commercial Joint Stock Bank | 100(Online banking), Bank transfer\nSAC     | Sacom Bank | 100(Online banking), Bank transfer, Withdrawal\nSAIGON  | SAIGON Bank | 100(Online banking), Bank transfer\nSCB     | Siam Commercial Bank | 100(Online banking), Bank transfer, Bank QR\nTCB     | Techcombank | 100(Online banking), Bank transfer, Withdrawal\nTPB     | Tanganyika Postal Office Savings Bank | 100(Online banking), Bank transfer, Bank QR\nVCB     | Vietcom Bank | 100(Online banking), Bank transfer, Bank QR, Withdrawal\nVP      | Vietnam Prosperity Joint‑Stock Commercial Bank | 100(Online banking), Bank transfer, Bank QR\nVTB     | Vietin Bank | 100(Online banking), Bank transfer, Bank QR, Withdrawal"
					},
					"response": []
				},
				{
					"name": "d. Order Status",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "status | name | description |\n:-----:|:----:|:------------|\n1    |Pending        |Transaction is pending                                                                     |\n2    |Processing     |Transaction is processing                                                                  |\n3    |Completed      |Transaction is completed                                                                   |\n4    |Manual process |This transaction is necessary to be in contact with OneWallet if status is Manual Process.  |\n5    |Failed         |Transaction is failed                                                                      |"
					},
					"response": []
				},
				{
					"name": "e. Error Code",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "error_code | message |\n:-------:|:---------|\n200    |Success                 |\n403    |Permission error        |\n404    |Resource does not exist |\n405    |Method not allowed      |\n422    |Verification error      |\n500    |Server error            |"
					},
					"response": []
				},
				{
					"name": "f. Troubleshooting & FAQ",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "## Notes: There are two kinds of error type. One is `BasicError` for none sensitive information and bypassing in plaintext. Another is `EncrytionError` for sensitive information and bypassing in ciphertext. ##\r\n\r\n\r\n| Error Type | Error Message | Description |\r\n|---|---|---|\r\n| `BasicError` | The API request method must be __POST__ | You may use the improper method in the request of API service, like GET, PUT, DELETE, and so forth. |\r\n| `BasicError` | The request payload is empty | Please check your protocol of API service. Use __https://__ instead of __http://__, and make sure the method must be __POST__. |\r\n| `BasicError` | Invalid merchant id | Go __Merchant Back Office__, our OneWallet backend could help to get your merchant id.  |\r\n| `EncrytionError` | Could not decrypt the payload | Any issues with Integration URL, Merchant Key, and encryption process flow or any others. Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#49c0aa9c-af68-4836-b740-55048c7a6e3d). |\r\n| `EncrytionError` | The payload is invalid | This error happens when the body of the request is invalid. Just put the data payload encryted in your body without any keys. Here is an incorrect example as below:<br>__data=payload__|\r\n| `EncrytionError` | json decode failed | OneWallet backend recevied the data payload and tried to do decrytion. If this error comes out, your encryption process may not be proper. Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#49c0aa9c-af68-4836-b740-55048c7a6e3d). |\r\n| `DepositVerificationError` | IP x.x.x.x not allowed | Please goto __Merchant Back Office__, and step into __Merchant__ > __White List__. Then check your server IP has been in our white list. |\r\n| `DepositVerificationError` | Channel error. Please contact customer service | Please contact us. |\r\n| `DepositVerificationError` | Deposit domain is not configured properly. | Please contact us. |\r\n| `DepositVerificationError` | The notify url not in the whitelist | Please offer your notification callback URL to OneWallet service. We will put your notify_url address on our whitelist first. |\r\n| `DepositVerificationError` | NO QR SERVICE. This bank doesn't provide the QR PAY payment. | This bank doesn't provide the QR PAY payment. |\r\n| `WithdrawalVerificationError` | IP x.x.x.x not allowed | Please goto __Merchant Back Office__, and step into __Merchant__ > __White List__. Then check your server IP has been in our white list. |\r\n| `WithdrawalVerificationError` | balance is not enough | Please goto __Merchant Back Office__, and step into __Merchant__. Then check your __Available Balance__ is enough or not. |\r\n| `WithdrawalVerificationError` | No card available | Please contact us. |\r\n| `WithdrawalVerificationError` | The notify url not in the whitelist | Please offer your notification callback URL to OneWallet service. We will put your notify_url address on our whitelist first. |\r\n\r\nIf one encounter any issues with BasicError/EncrytionError, please follow the instruction below.\r\n\r\n1. Requesting URL Endpoint\r\n\r\n   The endpoint is composed of the root URL in Integration in Merchant Back Office and the API route.\r\n\r\n   It must start with https:// (protocol; ex. https://domain.com/11-xxx/SH/sendPay )\r\n\r\n2. HTTP method always being POST\r\n\r\n   Confirm HTTP methods in each requests if they are POST.\r\n\r\n   We suggest using a packet analyzer to debug requests if they are properly request.\r\n\r\n3. Embed JSON Data\r\n\r\n   Confirm the data in each requests is correct JSON.\r\n\r\n4. Decryptable encryption\r\n\r\n   After implemented encryption, one should check if the implemented decrytion is able to decrypt the data from encryption which uses the same key that from Integration in Merchant Back Office.\r\n\r\n   The other useful tool to debug encryption implementation is using our Decryption Tool in Merchant Back Office.\r\n\r\n5. Encrypted data in payload is required\r\n\r\n   The payload in each requests must be encrypted, API resources don't accept any other non-encrypted contents.\r\n\r\n   If the encrypted data is `eyJpdiI6...`, the payload must be `eyJpdiI6...` and cannot be the following instances:\r\n\r\n   * `\"eyJpdiI6...\"` (Unnecessary quotes)\r\n   * `data=eyJpdiI6...`\r\n   * `{\"data\":\"eyJpdiI6...\"}`\r\n\r\n6. Using HTTP development tools to help\r\n\r\n   Use HTTP tools ([Postman](https://www.postman.com/)、[Curl](https://curl.haxx.se/)...) to confirm if getting the same response in the implementation.\r\n\r\nIf the above instruction are not able to resolve any encrytion issues.\r\n\r\nPlease save the transmission into a plain file (Request URL, Response, Header, and Payload are essential to be included.) and send to us for the further assistance."
					},
					"response": []
				},
				{
					"name": "g. *** AES Encryption, Decryption and Request (Must Read) ***",
					"request": {
						"method": "VIEW",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "# !!!Attention!!! As representative of the request should encrypt the data before sending; as representative of the response should do decrypt after receving in each API, no matter which is merchant or OneWallet.  #\r\n\r\n> ## Specification\r\n\r\n| Parameter name |name | Description | brief | ref |\r\n|:---:|:---:|:---:|:---:|:---:|\r\n||Encryption mode    |__AES-128-CBC__|The Advanced Encryption Standard (AES) is a specification for the encryption of electronic data. CBC(Cipher Block Chaining) has been the most commonly used mode of operation. Its main drawbacks are that encryption is sequential, and that the message must be padded to a multiple of the cipher block size. One way to handle this last issue is through the method known as ciphertext stealing. Note that a one-bit change in a plaintext or initialization vector (IV) affects all following ciphertext blocks. |[wiki](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC))\r\n| encodeSHKEY | Merchant Key | __encodeSHKEY__ is provided by OneWallet backend - __Merchant Back Office__, which is ___realIV___ encoded by base64. The merchant should store it in the persistent storage.|\r\n| encodeIV | IV | The source is __realIV__ encoded by Base64 (binary-to-text encoding) | \r\n| realSHKEY | Merchat's key | Please decode __encodeSHKEY__ by Base64. The format is binary. | \r\n| realIV | The initialization vector (IV) | The initialization vector value, a 16 bytes, which is generated by sender randomly. | This purpose is hence to produce distinct ciphertexts even the same data. |[wiki](https://en.wikipedia.org/wiki/Initialization_vector)\r\n||Padding|__PKCS#7__|\r\n\r\n> ## Encryption process\r\n  \r\n__Caution: The data of the request must be encrypted by AES-128-CBC, no matter is from the merchant or OneWallet.__\r\n  \r\nStep by step:\r\n\r\n__1st.__ Get the merchant's Key as `encodeSHKEY` from OneWallet backend - __Merchant Back Office__ (Take `encodeSHKEY` as Base64 encoded string for granted)\r\n\r\n> `For instance: WKOBlNUlzvNzh9g/9uBfqQ==`  \r\n  \r\n  \r\n__2nd.__ Produce a 16 bytes IV value as `realIV`.  \r\n  \r\n> `For instance: 2u2Ldqx19SrgAXSQr24Lcw==`  \r\n  \r\n__3rd.__ Convert your parameter(s) into JSON string.\r\n\r\n```json\r\n{\"sh_order_no\":\"20200212073344\",\"order_amount\":11.11,\"order_type\":\"100\",\"bank_code\":\"TEST_HGY\",\"notify_url\":\"https://example.com/deposit\",\"note\":\"note\"}\r\n```  \r\n  \r\n__4th.__ Encrypt the JSON string(as above) with AES-128-CBC by `realIV` and `realSHKEY`, shown as below.\r\n\r\n```string\r\n33U72GhtQqKI01o5JKh363xYxZCkre5DsndCdakdIrcvJSEDZ99VRM1+UnO2GFNN7HYRdilMMJ6oHRqNUcWlKs7433FCDwjPfKnDu4vUTnm7PG9Cme/HC77wnayeGJWbXnxd7/52gS+R8rpAQHVnDRH012GVPHIwX+RsdztyoElkcopqfmjpKgZd03ELiLXwGTl4xzQb5r3xGkvKEOQi/A==\r\n```  \r\n  \r\n  \r\n__5th.__ Put `encodeIV` into the key `iv`, Likewise, put the JSON string (had encrpted) into the key `value`. Let `iv` and `key` as JSON string.\r\n```json\r\n{\r\n    \"iv\":\"2u2Ldqx19SrgAXSQr24Lcw==\",\r\n    \"value\":\"33U72GhtQqKI01o5JKh363xYxZCkre5DsndCdakdIrcvJSEDZ99VRM1+UnO2GFNN7HYRdilMMJ6oHRqNUcWlKs7433FCDwjPfKnDu4vUTnm7PG9Cme/HC77wnayeGJWbXnxd7/52gS+R8rpAQHVnDRH012GVPHIwX+RsdztyoElkcopqfmjpKgZd03ELiLXwGTl4xzQb5r3xGkvKEOQi/A==\"\r\n}\r\n```  \r\n  \r\n__6th.__ Then do encode the JSON string by Base64.\r\n\r\n```string\r\neyJpdiI6IjJ1MkxkcXgxOVNyZ0FYU1FyMjRMY3c9PSIsInZhbHVlIjoiMzNVNzJHaHRRcUtJMDFvNUpLaDM2M3hZeFpDa3JlNURzbmRDZGFrZElyY3ZKU0VEWjk5VlJNMStVbk8yR0ZOTjdIWVJkaWxNTUo2b0hScU5VY1dsS3M3NDMzRkNEd2pQZktuRHU0dlVUbm03UEc5Q21lL0hDNzd3bmF5ZUdKV2JYbnhkNy81MmdTK1I4cnBBUUhWbkRSSDAxMkdWUEhJd1grUnNkenR5b0Vsa2NvcHFmbWpwS2daZDAzRUxpTFh3R1RsNHh6UWI1cjN4R2t2S0VPUWkvQT09In0=\r\n```  \r\n  \r\n__7th.__ How to send the request.\r\n+ Method => POST\r\n+ Body(Payload) => Encode the whole JSON data(as 6th step) by base64\r\n+ Launch a request !  \r\n\r\n```curl\r\ncurl -X POST {Merchant Back Office Integration URL}/SH/{endpoint}} \\\r\n-d \"eyJpdiI6IjJ1MkxkcXgxOVNyZ0FYU1FyMjRMY3c9PSIsInZhbHVlIjoiMzNVNzJHaHRRcUtJMDFvNUpLaDM2M3hZeFpDa3JlNURzbmRDZGFrZElyY3ZKU0VEWjk5VlJNMStVbk8yR0ZOTjdIWVJkaWxNTUo2b0hScU5VY1dsS3M3NDMzRkNEd2pQZktuRHU0dlVUbm03UEc5Q21lL0hDNzd3bmF5ZUdKV2JYbnhkNy81MmdTK1I4cnBBUUhWbkRSSDAxMkdWUEhJd1grUnNkenR5b0Vsa2NvcHFmbWpwS2daZDAzRUxpTFh3R1RsNHh6UWI1cjN4R2t2S0VPUWkvQT09In0=\"\r\n```  \r\n  \r\n  \r\n> ## Decryption process\r\n  \r\n__Caution: The data of the response must be decrypted by AES-128-CBC, no matter is from the merchant or OneWallet.__\r\n  \r\nStep by step:\r\n\r\n__1st.__ Get the reponse data encrypted from OneWallet\r\n\r\n```string\r\neyJpdiI6IjJ1MkxkcXgxOVNyZ0FYU1FyMjRMY3c9PSIsInZhbHVlIjoiMzNVNzJHaHRRcUtJMDFvNUpLaDM2M3hZeFpDa3JlNURzbmRDZGFrZElyY3ZKU0VEWjk5VlJNMStVbk8yR0ZOTjdIWVJkaWxNTUo2b0hScU5VY1dsS3M3NDMzRkNEd2pQZktuRHU0dlVUbm03UEc5Q21lL0hDNzd3bmF5ZUdKV2JYbnhkNy81MmdTK1I4cnBBUUhWbkRSSDAxMkdWUEhJd1grUnNkenR5b0Vsa2NvcHFmbWpwS2daZDAzRUxpTFh3R1RsNHh6UWI1cjN4R2t2S0VPUWkvQT09In0=\r\n```\r\n\r\n__2nd.__ Use Base64 decode to get __iv__ and __value__ if it's correct, or an [__error_code__](#dbec66e6-bb41-4636-924b-8ea0539dbfb7) instead.\r\n\r\n> Normal Response:\r\n\r\nFor decryption, to get the `realIV` by Base64 decoding from `encodeIV`.\r\n\r\n```json\r\n{\r\n    \"iv\":\"2u2Ldqx19SrgAXSQr24Lcw==\", // Here encodeIV is.\r\n    \"value\":\"33U72GhtQqKI01o5JKh363xYxZCkre5DsndCdakdIrcvJSEDZ99VRM1+UnO2GFNN7HYRdilMMJ6oHRqNUcWlKs7433FCDwjPfKnDu4vUTnm7PG9Cme/HC77wnayeGJWbXnxd7/52gS+R8rpAQHVnDRH012GVPHIwX+RsdztyoElkcopqfmjpKgZd03ELiLXwGTl4xzQb5r3xGkvKEOQi/A==\"\r\n}\r\n```\r\n\r\n> Error Response:\r\n\r\n```json\r\n{\r\n\t\"error_code\":500\r\n}\r\n```\r\n\r\n__3rd.__ Decrypt the key `value` with `realIV` and `realSHKEY`, then suppose we will get the JSON string as data source.\r\n\r\n```json\r\n{\"sh_order_no\":\"20200212073344\",\"order_amount\":11.11,\"order_type\":\"100\",\"bank_code\":\"TEST_HGY\",\"notify_url\":\"https://example.com/deposit\",\"note\":\"note\"}\r\n```\r\n\r\n## 4. You may use our examples by different programming ways:\r\n\r\n- [__PHP__](https://github.com/devkhgy/top/blob/doc/code/PHP_example_encrypt_decrypt.php)\r\n- [__C#__](https://github.com/devkhgy/top/blob/doc/code/CSharp_example_encrypt_decrypt.cs)\r\n- [__Java__](https://github.com/devkhgy/top/blob/doc/code/JavaExampleEncryptDecrypt.java)"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d5db1f9-179e-4900-b885-8d75820d7c60",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "700eef23-8649-4c18-ba9e-007338284a33",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "B. Deposit",
			"item": [
				{
					"name": "a. Bank Deposit API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
									"type": "text"
								},
								{
									"key": "order_amount",
									"value": "",
									"description": "* __decimal(14,6)__\n* required\n* The amount of the order from merchant.\n* The amount should be integer in VND. (Number without any decimal places)",
									"type": "text"
								},
								{
									"key": "order_type",
									"value": "100",
									"description": "* __string(30)__\n* required\n* Order type<br>\n`100: Online banking`<br>\n`zalo_qr: Zalo QR`<br>\n`momo_qr: Momo QR`<br>\n`viettel_qr: Viettelpay QR`<br>\n`viettel_fix_qr: Viettelpay Fix QR`<br>\n`bank_qr: Bank QR`<br>\n`bank_transfer: Bank transfer`<br>\n`rcgcard_pc_viettel: Prepaid Viettel`<br>\n`rcgcard_pc_mobifone: Prepaid Mobifone`<br>\n`rcgcard_pc_vinaphone: Prepaid Vinaphone`<br>\n`rcgcard_zing: Prepaid Zing`<br>\n",
									"type": "text"
								},
								{
									"key": "bank_code",
									"value": "",
									"description": "* __string(50)__\n* The field is required if 'order_type' is 100, bank_qr, or bank_transfer.\n* Bank Code, Provide when deposit, please refer to the bank code list<br>\nref. [A-c. Bank Code](#04798067-a098-461a-9532-a4ef6d376f33)\n* Please choose the bank to match the currency of the merchant since only one currency supports on each merchant.",
									"type": "text"
								},
								{
									"key": "notify_url",
									"value": "",
									"description": "* __string(255)__\n* Asynchronous notification address, Return address of the asynchronous notification process.\n* MUST offer your notify_url to us first; otherwise, you will get \"The notify url not in the whitelist\" error. <br>\nref. [A-f. Troubleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)\n* You may goto __Merchant Back Office__, then step into __Transaction__ to resend the outcome of the one of orders. \n* __Do NOT encode url.__\n* __e.g.1  http(s)://{your domain}/sendPay/notification__\n* __e.g.2  http(s)://{your domain}/sendPay/notification?key1=value1__",
									"type": "text"
								},
								{
									"key": "note",
									"value": "",
									"description": "* __string(100)__\n* Remarks",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://[Integration URL]/SH/sendPay",
							"protocol": "https",
							"host": [
								"[Integration URL]"
							],
							"path": [
								"SH",
								"sendPay"
							]
						},
						"description": "1.Refer to the below figure for integration URL.\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)\n\n\n# 2.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n\n3.Merchant initiates a request to OneWallet service\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/SendPayFlow2.png)\n\n> ## Deposit API Response Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to unwrap the data of body.\n\nKey           |Description\n:---:|:---\nerror_code          |Error Code<br>This value returns the status code 200 if the transaction completed correctly and an error code otherwise.<br>Determining if the status code is 200 and proceeding is essential.<br>For more further information, please refer to [A-e. Error Code](#8b2a4f43-901e-479f-aee3-5f1b4fc0798c) & [A-f. Trobleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)<br>Some error also trigger Deposit Notification, please refer to [B-c. Deposit Notification API Definition](#cdd947b9-8aec-4928-8f2d-fe8636aa5c8f).\ndata                |Return information\ndata.order_id       |Gateway Order ID\ndata.order_amount   |The amount of the order from merchant\ndata.request_amount |The real amount of the order.\ndata.url            |Available Deposit URLs (Must use GET request method; Domain changes for each request)<br>__Propose to do speed-testing before redirecting as__ [Example](https://github.com/devkhgy/top/blob/doc/code/DepositSpeedTest.html)\ndata.token          |Deposit token\n\n> ## Deposit API Response Instance ##\n```json\n{\n  \"error_code\": 200,\n  \"data\": {\n    \"order_id\": \"D-0103201000001\",\n    \"order_amount\": 10.01,\n    \"request_amount\": 10.01,\n    \"url\": [\n      \"https://deposit1.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\",\n      \"https://deposit2.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\",\n      \"https://deposit3.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\"\n    ],\n    \"token\": \"1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\"\n  }\n}\n```\n\n\n> ## Deposit API Request Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to wrap the data of body."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "DEB000001",
											"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
											"type": "text"
										},
										{
											"key": "order_amount",
											"value": "10.01",
											"description": "* __decimal(14,6)__\n* required\n* The amount of the order from merchant.\n* The amount should be integer in VND or IDR. (Number without any decimal places)",
											"type": "text"
										},
										{
											"key": "order_type",
											"value": "100",
											"description": "* __string(10)__\n* required\n* Order type<br>\n__100 as Internet Banking__",
											"type": "text"
										},
										{
											"key": "bank_code",
											"value": "BBL",
											"description": "* __string(50)__\n* required\n* Bank Code, Provide when online banking payment, please refer to the bank code list<br>\nref. [Bank Code](#cc7d8d7a-6b7b-4297-ab96-9982aa88c66a)\n* Please choose the bank to match the currency of the merchant since only one currency supports on each merchant.",
											"type": "text"
										},
										{
											"key": "notify_url",
											"value": "https://example.com/callback",
											"description": "* __string(255)__\n* Asynchronous notification address, Return address of the asynchronous notification process.\n* MUST offer your notify_url to us first; otherwise, you will get [The notify url not in the whitelist](#f90e9510-0d5e-4489-9634-410c4f8849a9) error.\n* You may goto __Merchant Back Office__, then step into __Transaction__ to resend the outcome of the one of orders. \n* __Do NOT encode url.__\n* __e.g.1  http(s)://{your domain}/sendPay/notification__\n* __e.g.2  http(s)://{your domain}/sendPay/notification?key1=value1__",
											"type": "text"
										},
										{
											"key": "note",
											"value": "test",
											"description": "* __string(100)__\n* Remarks",
											"type": "text"
										},
										{
											"key": "language",
											"value": "en",
											"description": "* The language intended for the user in Deposit website. If no value is specified, browser language preference is applied.\n* Supported Languages：<br>\n  - `en: English`\n  - `th: Thai(Only for Thai banks)`\n  - `vn: Vietnamese(Only for Vietnam banks)`\n  - `id: Indonesian(Only for Indonesia banks)`\n* The priority language in Deposit website:\n  1. Recently used language in Deposit website.\n  2. \"language\" parameter.\n  3. Browser language preferences.\n\n* It needs to clean cookies for testing if \"language\" parameter works.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://[Integration URL]/SH/sendPay",
									"protocol": "https",
									"host": [
										"[Integration URL]"
									],
									"path": [
										"SH",
										"sendPay"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n  \"error_code\": 200,\r\n  \"data\": {\r\n    \"order_id\": \"D-0103201000001\",\r\n    \"order_amount\": 10.01,\r\n    \"request_amount\": 10.01,\r\n    \"url\": [\r\n      \"https://deposit1.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\",\r\n      \"https://deposit2.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\",\r\n      \"https://deposit3.com?token=1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\"\r\n    ],\r\n    \"token\": \"1AYo99S4vymMeAWHsvWeWGH7XKblhL8tuDYlfhAN\"\r\n  }\r\n}"
						}
					]
				},
				{
					"name": "c. Deposit Notification API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
									"type": "text"
								},
								{
									"key": "order_status",
									"value": "",
									"description": "* __string(20)__\n* Payment Result\n* [A-d. Order Status](#454438d5-5fca-484a-8169-f06bd7813ddc)",
									"type": "text"
								},
								{
									"key": "order_amount",
									"value": "",
									"description": "* __decimal(14,6)__\n* The amount of the order from merchant.",
									"type": "text"
								},
								{
									"key": "paid_amount",
									"value": "",
									"description": "* __decimal(14,6)|null__\n* Actual payment.",
									"type": "text"
								},
								{
									"key": "request_amount",
									"value": "",
									"description": "* __decimal(14,6)__\n* The real amount of the order.<br>__Caution: If amount is integer, `OneWallet` will add 2 decimal places randomly for account statement.__",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "[notify_url_by_merchant]",
							"host": [
								"[notify_url_by_merchant]"
							]
						},
						"description": "# 1.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n2.Implement By Merchant\n\nIf one Deposit transaction compeletes, Merchant would be notified by OneWallet\n\n> ## Deposit Notification API Response Instance ##\n\nWhether it's a successful transaction or not, the response must be JSON-format, once you get the notification from OneWallet then respond as bellow: <br> \n*** Caution: The response must be encryted. ***\n\n```json\n{\"result\":\"success\"}\n```\n\n> ## Deposit Notification API Request Structure ##"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "XXX123456789XXX",
											"description": "* __string(50)__\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
											"type": "text"
										},
										{
											"key": "order_status",
											"value": "3",
											"description": "* __string(20)__\n* Payment Result",
											"type": "text"
										},
										{
											"key": "order_amount",
											"value": "10.01",
											"description": "* __decimal(14,6)__\n* The amount of the order from merchant.",
											"type": "text"
										},
										{
											"key": "paid_amount",
											"value": "10.01",
											"description": "* __decimal(14,6)|null__\n* Actual payment.",
											"type": "text"
										},
										{
											"key": "request_amount",
											"value": "10.01",
											"description": "* __decimal(14,6)__\n* The real amount of the order.<br>__Caution: If amount is integer, `OneWallet` will add 2 decimal places randomly for account statement.__",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "[notify_url_by_merchant]",
									"host": [
										"[notify_url_by_merchant]"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"result\": \"success\"\r\n}"
						}
					]
				},
				{
					"name": "d. Deposit Query API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the API return data<br>\n__The order number must be unique__",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://[Integration URL]/SH/queryPay",
							"protocol": "https",
							"host": [
								"[Integration URL]"
							],
							"path": [
								"SH",
								"queryPay"
							]
						},
						"description": "1.Refer to the below figure for integration URL.\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)\n\n\n# 2.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n\n3.Merchant initiates a request to OneWallet service\n\n> ## Deposit Query API Response Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to unwrap the data of body.\n\nKey               | Description\n:---:|:---\nerror_code          |[A-e. Error Code](#8b2a4f43-901e-479f-aee3-5f1b4fc0798c) & [A-f. Trobleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)\ndata                |Return information\ndata.order_id       |Gateway Order ID\ndata.sh_order_no    |Merchant order number, which will be used as the response data\ndata.order_type     |Order type<br><table><tr><td>type</td><td>name</td></tr><tr><td>100</td><td>Internet Banking</td></tr></table>\ndata.status         |[A-d. Order Status](#454438d5-5fca-484a-8169-f06bd7813ddc)\ndata.order_amount   |The amount of the order from merchant.\ndata.paid_mount     |Actual payment.\ndata.request_amount |The real amount of the order.<br>__Caution: If amount is integer, `OneWallet` will add 2 decimal places randomly for account statement.__\ndata.created_at     |Order creation time, formatted as __Y-m-d H:i:s__\ndata.finished_at    |Order completion time, formatted as __Y-m-d H:i:s__\n\n> ## Deposit Query API Response Instance ##\n```json\n{\n   \"error_code\": 200,\n   \"data\": {\n      \"order_id\": \"D-0103201000001\",\n      \"sh_order_no\": \"ORDERNO0001\",\n      \"status\": 3,\n      \"order_type\": \"100\",\n      \"order_amount\": 100,\n      \"paid_amount\": 100,\n      \"request_amount\": 100.78,\n      \"created_at\": \"2019-10-10 00:00:00\",\n      \"finished_at\": \"2019-10-10 00:05:05\",\n   }\n}\n\n```\n\n\n> ## Deposit API Request Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to wrap the data of body."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "ORDERNO0001",
											"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the API return data<br>\n__The order number must be unique__",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://[Integration URL]/SH/queryPay",
									"protocol": "https",
									"host": [
										"[Integration URL]"
									],
									"path": [
										"SH",
										"queryPay"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n   \"error_code\": 200,\r\n   \"data\": {\r\n      \"order_id\": \"D-0103201000001\",\r\n      \"sh_order_no\": \"ORDERNO0001\",\r\n      \"status\": 3,\r\n      \"order_type\": \"100\",\r\n      \"order_amount\": 100,\r\n      \"request_amount\": 100.78,\r\n      \"paid_amount\": 100,\r\n      \"created_at\": \"2019-10-10 00:00:00\",\r\n      \"finished_at\": \"2019-10-10 00:05:05\",\r\n   }\r\n}\r\n"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5df20464-985e-4a0e-b8ba-af062e37be16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "62f25676-697e-4853-ac73-a3074ebacdd5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "C. Withdrawal",
			"item": [
				{
					"name": "a. Withdrawal API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
									"type": "text"
								},
								{
									"key": "bank_code",
									"value": "",
									"description": "* __string(50)__\n* required\n* Bank Code, Provide when online banking payment, please refer to the bank code list<br>\nref. [A-c. Bank Code](#04798067-a098-461a-9532-a4ef6d376f33)\n* Please choose the bank to match the currency of the merchant since only one currency supports on each merchant.",
									"type": "text"
								},
								{
									"key": "bank_account",
									"value": "",
									"description": "* __string(50)__\n* required\n* Bank Account Name<br>",
									"type": "text"
								},
								{
									"key": "bank_user_name",
									"value": "",
									"description": "* __string(50)__\n* required\n* Bank Account Name<br>\nThe name is used for confirming if the account number is matched before proceeding with the transaction.  It usually contains a first name and last name.",
									"type": "text"
								},
								{
									"key": "order_amount",
									"value": "",
									"description": "* __decimal(14,6)__\n* required\n* The amount of the order from merchant.\n* The amount should be integer in VND. (Number without any decimal places)",
									"type": "text"
								},
								{
									"key": "notify_url",
									"value": "",
									"description": "* __string(255)__\n* Asynchronous notification address, Return address of the asynchronous notification process.\n* MUST offer your notify_url to us first; otherwise, you will get \"The notify url not in the whitelist\" error. <br>\nref. [A-f. Troubleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)\n* You may goto __Merchant Back Office__, then step into __Transaction__ to resend the outcome of the one of orders. \n* __Do NOT encode url.__\n* __e.g.1  http(s)://{your domain}/sendPay/notification__\n* __e.g.2  http(s)://{your domain}/sendPay/notification?key1=value1__",
									"type": "text"
								},
								{
									"key": "note",
									"value": "",
									"description": "* __string(100)__\n* Remarks",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://[Integration URL]/SH/sendWithdraw",
							"protocol": "https",
							"host": [
								"[Integration URL]"
							],
							"path": [
								"SH",
								"sendWithdraw"
							]
						},
						"description": "1.Refer to the below figure for integration URL.\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)\n\n\n# 2.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n\n3.Merchant initiates a request to OneWallet service\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/SendWithdrawFlow.png)\n\n> ## Withdrawal API Response Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to unwrap the data of body.\n\nKey           |Description\n:---:|:---\nerror_code       |Error Code<br>This value returns the status code 200 if the transaction completed correctly and an error code otherwise.<br>Determining if the status code is 200 and proceeding is essential.<br>For more further information, please refer to [A-e. Error Code](#8b2a4f43-901e-479f-aee3-5f1b4fc0798c) & [A-f. Trobleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)<br>Some error also trigger Deposit Notification, please refer to [C-b. Withdrawal Notification API Definition](#c168bdc0-be65-4dee-a30f-db1e9ec8afd5).\ndata             |Return information\ndata.order_id    |Gateway Order ID\ndata.sh_order_no |Merchant Order Number\n\n> ## Withdrawal API Response Instance ##\n```json\n{\n   \"error_code\": 200,\n   \"data\": {\n      \"order_id\": \"W-0103201000001\",\n      \"sh_order_no\": \"2TX5d8dc37804727\"\n   }\n}\n```\n\n> ## Withdrawal API Request Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to wrap the data of body."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "2TX5d8dc37804727",
											"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
											"type": "text"
										},
										{
											"key": "bank_code",
											"value": "BBL",
											"description": "* __string(50)__\n* required\n* Bank Code, Provide when online banking payment, please refer to the bank code list<br>\nref. [Bank Code](#cc7d8d7a-6b7b-4297-ab96-9982aa88c66a)\n* Please choose the bank to match the currency of the merchant since only one currency supports on each merchant.",
											"type": "text"
										},
										{
											"key": "bank_account",
											"value": "123456999",
											"description": "* __string(50)__\n* required\n* Bank Account Name<br>",
											"type": "text"
										},
										{
											"key": "bank_user_name",
											"value": "JoJo",
											"description": "* __string(50)__\n* required\n* Bank Account Name<br>\nThe name is used for confirming if the account number is matched before proceeding with the transaction.  It usually contains a first name and last name.",
											"type": "text"
										},
										{
											"key": "order_amount",
											"value": "100",
											"description": "* __decimal(14,6)__\n* required\n* The amount of the order from merchant.\n* The amount should be integer in VND or IDR. (Number without any decimal places)",
											"type": "text"
										},
										{
											"key": "notify_url",
											"value": "https://example.com/callback",
											"description": "* __string(255)__\n* Asynchronous notification address, Return address of the asynchronous notification process.\n* MUST offer your notify_url to us first; otherwise, you will get [The notify url not in the whitelist](#f90e9510-0d5e-4489-9634-410c4f8849a9) error.\n* You may goto __Merchant Back Office__, then step into __Transaction__ to resend the outcome of the one of orders. \n* __Do NOT encode url.__\n* __e.g.1  http(s)://{your domain}/sendPay/notification__\n* __e.g.2  http(s)://{your domain}/sendPay/notification?key1=value1__",
											"type": "text"
										},
										{
											"key": "note",
											"value": "testing",
											"description": "* __string(100)__\n* Remarks",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://[Integration URL]/SH/sendWithdraw",
									"protocol": "https",
									"host": [
										"[Integration URL]"
									],
									"path": [
										"SH",
										"sendWithdraw"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error_code\": 200,\r\n    \"data\": {\r\n        \"order_id\": \"W-0103201000001\",\r\n        \"sh_order_no\": \"2TX5d8dc37804727\"\r\n    }\r\n}"
						}
					]
				},
				{
					"name": "b. Withdrawal Notification API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
									"type": "text"
								},
								{
									"key": "order_status",
									"value": "",
									"description": "* __string(20)__\n* Payment Result\n* [A-d. Order Status](#454438d5-5fca-484a-8169-f06bd7813ddc)",
									"type": "text"
								},
								{
									"key": "order_amount",
									"value": "",
									"description": "* __decimal(14,6)__\n* The amount of the order from merchant.",
									"type": "text"
								},
								{
									"key": "paid_amount",
									"value": "",
									"description": "* __decimal(14,6)|null__\n* Actual payment.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "[notify_url_by_merchant]",
							"host": [
								"[notify_url_by_merchant]"
							]
						},
						"description": "# 1.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n2.Implement By Merchant\n\nIf one Withdrawal transaction compeletes, Merchant would be notified by OneWallet\n\n> ## Withdrawal  Notification API Response Instance ##\n\nWhether it's a successful transaction or not, the response must be JSON-format, once you get the notification from OneWallet then respond as bellow: <br> \n*** Caution: The response must be encryted. ***\n\n```json\n{\"result\":\"success\"}\n```\n\n> ## Withdrawal Notification API Request Structure ##"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "ORDERNO0001",
											"description": "* __string(50)__\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
											"type": "text"
										},
										{
											"key": "order_status",
											"value": "3",
											"description": "* __string(20)__\n* Payment Result",
											"type": "text"
										},
										{
											"key": "order_amount",
											"value": "100.05",
											"description": "* __decimal(14,6)__\n* The amount of the order from merchant.",
											"type": "text"
										},
										{
											"key": "paid_amount",
											"value": "100.05",
											"description": "* __decimal(14,6)|null__\n* Actual payment.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "[notify_url_by_merchant]",
									"host": [
										"[notify_url_by_merchant]"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"result\": \"success\"\r\n}"
						}
					]
				},
				{
					"name": "c. Withdrawal Query API Definition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "sh_order_no",
									"value": "",
									"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://[Integration URL]/SH/queryWithdraw",
							"protocol": "https",
							"host": [
								"[Integration URL]"
							],
							"path": [
								"SH",
								"queryWithdraw"
							]
						},
						"description": "1.Refer to the below figure for integration URL.\n\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)\n\n\n# 2.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\n\n\n3.Merchant initiates a request to OneWallet service\n\n> ## Withdrawal Query API Response Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to unwrap the data of body.\n\nKey           |Description\n:---:|:---\nerror_code        |[A-e. Error Code](#8b2a4f43-901e-479f-aee3-5f1b4fc0798c) & [A-f. Trobleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)\ndata              |Return information\ndata.order_id     |Gateway Order ID\ndata.sh_order_no  |Merchant order number, which will be used as the response data\ndata.status       |[A-d. Order Status](#454438d5-5fca-484a-8169-f06bd7813ddc)\ndata.order_amount |The amount of the order from merchant.\ndata.paid_amount  |Actual payment.\ndata.created_at   |Order creation time, formatted as __Y-m-d H:i:s__\ndata.finished_at  |Order completion time, formatted as __Y-m-d H:i:s__\n\n> ## Withdrawal Query API Response Instance ##\n```json\n{\n   \"error_code\": 200,\n   \"data\": {\n      \"order_id\": \"W-0103201000001\",\n      \"sh_order_no\": \"ORDERNO0001\",\n      \"status\": 3,\n      \"order_amount\": 100.05,\n      \"paid_amount\": 100.05,\n      \"created_at\": \"2019-10-10 00:00:00\",\n      \"finished_at\": \"2019-10-10 00:05:05\",\n   }\n}\n```\n\n> ## Withdrawal Query API Request Structure ##\n\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to wrap the data of body."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "sh_order_no",
											"value": "ORDERNO0001",
											"description": "* __string(50)__\n* required\n* Merchant order number, which will be used as the response data<br>\n__The order number must be unique__",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://[Integration URL]/SH/queryWithdraw",
									"protocol": "https",
									"host": [
										"[Integration URL]"
									],
									"path": [
										"SH",
										"queryWithdraw"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n   \"error_code\": 200,\r\n   \"data\": {\r\n      \"order_id\": \"W-0103201000001\",\r\n      \"sh_order_no\": \"ORDERNO0001\",\r\n      \"status\": 3,\r\n      \"order_amount\": 100.05,\r\n      \"paid_amount\": 100.05,\r\n      \"created_at\": \"2019-10-10 00:00:00\",\r\n      \"finished_at\": \"2019-10-10 00:05:05\",\r\n   }\r\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "38dbbea2-df06-4b21-9d9a-6824d7b535bd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3fd49bd7-1e60-4dab-8e5f-0a06170a8939",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "D. Merchant Info",
			"item": [
				{
					"name": "a. Account Balance",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "request_time",
									"value": "",
									"description": "The Request Time is expected to be the current time, The accepted date format must be YYYY-MM-DD HH:mm:ss. (ex. 2020-04-29 21:59:49)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://[Integration URL]/SH/queryBalance",
							"protocol": "https",
							"host": [
								"[Integration URL]"
							],
							"path": [
								"SH",
								"queryBalance"
							]
						},
						"description": "1.Refer to the below figure for integration URL.\r\n\r\n![Alt text](https://raw.githubusercontent.com/devkhgy/top/doc/en/IntergrationUrl.png)\r\n\r\n\r\n# 2.Before sending the request, the data must be encrypted, and vice versa.Please refer to Encryption process of [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5)\r\n\r\n\r\n3.Merchant initiates a request to OneWallet service\r\n\r\n> ## Balance Query API Response Structure ##\r\n\r\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to unwrap the data of body.\r\n\r\nKey           |Description\r\n:---:|:---\r\nerror_code            | [A-e. Error Code](#8b2a4f43-901e-479f-aee3-5f1b4fc0798c) & [A-f. Trobleshooting & FAQ](#37339d61-07fb-447f-aaf9-595162bcdd22)\r\ndata                  | Return information\r\ndata.current_balance  | Current Balance\r\ndata.frozen_balance   | Frozen Amount\r\ndata.balance          | Available Balance\r\ndata.unsettle_balance | Unsettle Balance\r\n\r\n> ## Balance Query API Response Instance ##\r\n```json\r\n{\r\n   \"error_code\": 200,\r\n   \"data\": {\r\n      \"current_balance\": 10000,\r\n      \"frozen_balance\": 3,\r\n      \"balance\": 7000,\r\n      \"unsettle_balance\": 3000\r\n   }\r\n}\r\n```\r\n\r\n> ## Balance Query API Request Structure ##\r\n\r\n__Caution__: Must use our [A-g. \\*\\*\\* AES Encryption, Decryption and Request (Must Read) \\*\\*\\*](#f7141d55-39c6-42e8-a669-ea477b0039b5) to wrap the data of body."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "request_time",
											"value": "2020-04-29 21:59:49",
											"description": "The Request Time is expected to be the current time, The accepted date format must be YYYY-MM-DD HH:mm:ss. (ex. 2020-04-29 21:59:49)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://[Integration URL]/SH/queryBalance",
									"protocol": "https",
									"host": [
										"[Integration URL]"
									],
									"path": [
										"SH",
										"queryBalance"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error_code\": 200,\r\n    \"data\": {\r\n        \"current_balance\": 10000,\r\n        \"frozen_balance\": 3,\r\n        \"balance\": 7000,\r\n        \"unsettle_balance\": 3000\r\n    }\r\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a5a3019b-ac48-4792-b7e1-f0186b35973c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "96605da5-870c-49fb-b530-7dd1f418ceba",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}